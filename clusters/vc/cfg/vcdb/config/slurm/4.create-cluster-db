#!/bin/bash -vx

## $Header: $
## Source:
## @file vcdb/config/slurm/1.create-cluster-db

VCLOAD=../../../provision/loader/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

declare -x COMMON_ETCSLURM=${COMMON}/etc/slurm
declare -x SLURMCONF=${COMMON_ETCSLURM}/slurm.conf
declare -x REQUIRED_PROC_FILE=${PWD}/required.service

if [ -z "${SLURMCONF}" ] ; then
  ErrExit ${EX_OSFILE} "empty SLURMCONF"
fi
if [ ! -f ${SLURMCONF} ] ; then
  ErrExit ${EX_OSFILE} "SLURMCONF: ${SLURMCONF} nonexistent"
fi

CLUSTERNAME=$(grep ClusterName ${SLURMCONF} | sed 's/ClusterName=//')
rc=$?

if [ ${rc} -ne ${GREP_FOUND} ] ; then
  ErrExit ${EX_OSFILE} "ClusterName not found in ${SLURMCONF}"
fi

if [ ! -f ${REQUIRED_PROC_FILE} -o -z ${REQUIRED_PROC_FILE} ] ; then
  ErrExit ${EX_OSFILE} "empty or missing REQUIRED_PROC_FILE: ${REQUIRED_PROC_FILE}"
fi 

services=$(echo $(cat ${REQUIRED_PROC_FILE}))

if [ -z "${services}" ] ; then
  ErrExit ${EX_OSERR} "no required services specified in {REQUIRED_PROC_FILE}?"
fi

for _s in ${services}
do
  ps_running=$(systemctl status ${_s} | grep -v grep | grep 'Active: active (running)')
  echo ${_s}
  if [ -z "${ps_running}" ] ; then
    echo "required ${_s} service not active"
    echo '---'
    systemctl status ${_s}
    echo '---'
    ps_out=$(ps ax | grep ${_s} | grep -v grep)
    if [ -z "${ps_out}" ] ; then
      echo ---
      echo ${ps_out}
      echo ---
      ErrExit ${EX_OSERR} "daemon \"${_s}\" not running"
    else
      pid=$(echo ${ps_out} | awk '{print $1}')
      echo "${_s}, pid: ${pid}"
    fi
  fi
done

exists=$(sacctmgr show cluster ${CLUSTERNAME} -n -P)
if [ -z "${exists}" ] ; then
  Verbose " creating cluster: ${CLUSTERNAME}"
  db_cluster=$(echo $(sacctmgr -iQ create cluster ${CLUSTERNAME}))
  # "Adding Cluster(s) Name = ${CLUSTERNAME}"
else
  Verbose " preexisting cluster: ${CLUSTERNAME}"
fi

db_cluster=$(sacctmgr show cluster ${CLUSTERNAME} -p -n | tail -1 | awk -F\| '{print $1}')
echo "db_cluster (sacctmgr show cluster): \"${db_cluster}\""
if [ -z "${db_cluster}" ] ; then
  ErrExit ${EX_OSERR} "sacctmgr show cluster \"${CLUSTERNAME}\" failed"
fi

if [[ ${db_cluster} != ${CLUSTERNAME} ]] ; then
  ErrExit ${EX_OSERR} "sacctmgr show cluster: \"${db_cluster}\" != \"${CLUSTERNAME}\""
fi

trap '' 0
exit ${EX_OK}
