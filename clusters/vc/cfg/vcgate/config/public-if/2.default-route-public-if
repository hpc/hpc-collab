#!/bin/bash

## $Header: $
## Source:
## @file vcgate/config/default-route/1.default-route-public-ip

## @brief manually bring munge service up so that final slurm db configuration is possible.

VCLOAD=../../../provision/loader/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

declare -x PUB_IF=$(cat if-dev)
declare -x LANL_public_ip_file=LANL/ip
declare -x LANL_public_gw_file=LANL/gw

if [ -z "${PUB_IF}" ] ; then
  ErrExit ${EX_SOFTWARE} "public interface: empty"
fi

if_exists=$(ifconfig ${PUB_IF})
case ${if_exists} in
  *"Device not found"*) ErrExit ${EX_SOFTWARE} "${PUB_IF}: ${if_exists}"	;;
  *)										;;
esac

if_ip=$(ip route | grep ${PUB_IF} | tail -1 | awk '{print $9}')

if_default_pubif_exists=$(ip route | grep default | tail -1)
if_metric=$(ip route | grep default | grep ${PUB_IF} | tail -1 | awk '{print $9}')

if [ -z "${if_default_pubif_exists}" ] ; then
  ErrExit ${EX_CONFIG} "default route via public interface ${PUB_IF} does not exist"
fi

# to set IS_LANL
SetFlags >/dev/null 2>&1

ip_gw=""
if_ip="DHCP"
if [ -n "${IS_LANL}" ] ; then
  for _f in ${LANL_public_ip_file} ${LANL_public_gw_file}
  do
    if [ ! -f ${_f} ] ; then
      ErrExit ${EX_CONFIG} "IS_LANL: ${_f} does not exist"
    fi
  done
  if_ip=$(cat ${LANL_public_ip_file})
  ip_gw=$(cat ${LANL_public_gw_file})
fi

if [ -n "${ip_gw}" ] ; then
  network=$(echo ${ip_gw} | sed 's/\.[0-9]*$/\.0\/24/')
  bcast=$(echo ${ip_gw} | sed 's/\.[0-9]*$/\.255/')
  ping -W 1 -n -c 1 ${ip_gw} >/dev/null 2>&1
  rc=$?
  if [ ${rc} -ne ${EX_OK} ] ; then
    #ErrExit ${EX_CONFIG} "gw ip (${ip_gw}) does not exist, or is not reachable"
    Warn ${EX_CONFIG} "gw ip (${ip_gw}) does not exist, or is not reachable"
  fi
  Rc ErrExit ${EX_SOFTWARE} "ip route add default dev ${PUB_IF} via ${ip_gw} metric 0"
else
  if [ -n "${if_metric}}" ] ; then
      numeric="[0-9]+"

    if [[ ${if_metric} =~ ${numeric} ]] ; then
      ErrExit ${EX_CONFIG} "default route metric for public interface ${PUB_IF}: not numeric: ${if_metric}"
    fi 

    route_exists=$(ip route show | egrep "default.*${PUB_IF}")
    if [ -n "${route_exists}" ] ; then
      Rc ErrExit ${EX_SOFTWARE} "ip route delete default dev ${PUB_IF}"
    fi
    if [ "${if_ip}" != "DHCP" ] ; then
      resembles_ip_address="[0-9]+.[0-9]+.[0-9]+.[0-9]+"
      if ! [[ ${if_ip} =~ ${resembles_ip_address} ]] ; then
        ErrExit ${EX_CONFIG} "ip address doesn't appear to resemble an ip address ${PUB_IF} ${if_ip}?"
      fi
      if [ -n "${if_ip}" ] ; then
        Rc ErrExit ${EX_SOFTWARE} "ip addr add dev ${PUB_IF} ${if_ip}/24"
      fi
    fi
    if_ip=$(echo $(ip address show dev ${PUB_IF}) | sed 's/^.*inet //' | sed 's/\/24 .*$//')
    if [ -n "${if_ip}" ] ; then
      ping -W 1 -n -c 1 ${if_ip} >/dev/null 2>&1
      if [ ${rc} -eq ${EX_OK} ] ; then
        Rc ErrExit ${EX_SOFTWARE} "ip route add default dev ${PUB_IF} via ${if_ip} metric 0"
      fi
    fi
  fi
fi

echo Default routes:
ip route show | grep default
echo ' '
netstat -rn


trap '' 0
exit ${EX_OK}
