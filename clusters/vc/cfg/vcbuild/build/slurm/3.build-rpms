#!/bin/bash

## $Header: $
## Source:
## @file vcbuild/build/slurm/3.build-rpms

_d=$(dirname $0)
provision_d=${_d}/../../../provision
loader_d=${provision_d}/loader
build_d=${provision_d}/../../build

VCLOAD=$(cd ${loader_d}; pwd)/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

PWD=$(pwd)
PRODUCT=$(basename ${PWD})

BUILDWHERE=$(cd ${build_d}; pwd)
BUILDWHAT=${CFG}/${HOSTNAME}/build
BUILDSLURM=${BUILDWHAT}/${PRODUCT}
RPMS=${BUILDSLURM}/RPMS.Manifest
VERSION_FILE=${BUILDSLURM}/version
BUILDWHERE_PRODUCT=${BUILDWHERE}/${PRODUCT}
RPMBUILD=${BUILDWHERE}/rpmbuild
ARCH=$(uname -m)
RPMS_ARCH=${RPMBUILD}/RPMS/${ARCH}
SOURCES=${RPMBUILD}/SOURCES
LAST_BUILT=${PWD}/last.built
NEED_BUILD_FLAG="/tmp/build.${PRODUCT}.need_build"

tstamp=$(date +%Y.%m.%d.%H:%M)

SetFlags

Rc ErrExit ${EX_SOFTWARE} "date > ${NEED_BUILD_FLAG}"

if [ ! -d ${BUILDWHERE_PRODUCT} ] ; then
  ErrExit ${EX_CONFIG}  "BUILDWHERE_PRODUCT:${BUILDWHERE_PRODUCT} not a directory"
fi

#SLURM_VERSION=$(readlink ${BUILDWHERE_PRODUCT} | sed "s/${PRODUCT}-//")
SLURM_VERSION=$(cat ${VERSION_FILE})

SLURM_TARBALL=slurm-${SLURM_VERSION}.tar.bz2
SLURM_SPEC=${BUILDWHERE_PRODUCT}/${PRODUCT}.spec

if [ ! -r "${SLURM_SPEC}" ] ; then
  opwd=$(pwd)
  cd ${BUILDWHERE}
  if [ ! -r ${BUILDWHERE_PRODUCT}/${SLURM_TARBALL} ] ; then
    ErrExit ${EX_CONFIG} "BUILDWHERE_PRODUCT/SLURM_TARBALL:${BUILDWHERE_PRODUCT}/${SLURM_TARBALL} missing"
  fi
  tar -xjvf ${BUILDWHERE_PRODUCT}/${SLURM_TARBALL}
  cd ${opwd}
fi
if [ ! -r ${SLURM_SPEC} ] ; then
  ErrExit ${EX_SOFTWARE} "SLURM_SPEC:${SLURM_SPEC} unreadable"
fi

SPECFILE_VERSION=$(grep -i '^Version:' ${SLURM_SPEC} | grep -v '%{version}' | sed 's/Version:\t//')
#SPECFILE_VERSION=$(rpm -q --qf '%{VERSION}\n' --specfile ${SLURM_SPEC} 2>&1 | sort | uniq | grep -v -i Warning)

rpms=$(ls ${RPMS_ARCH}/${PRODUCT}*-${SPECFILE_VERSION}*.${ARCH}.rpm 2>&1)

# if RPMS do *not* include dist changes (DIST tag), => NEED_BUILD_FLAG

if [ "${SPECFILE_VERSION}" = "${SLURM_VERSION}" ] ; then
  case "${rpms}" in
  *"No such file or directory"*)
    Verbose " [need build]"
    ## XXX also search in localrepo?
    ;;
  *rpm)
    for r in $(echo $(cat ${RPMS}))
    do
      if [ ! -f "${RPMS_ARCH}/${r}" ] ; then
        break
      fi
    done

    last_build_db=""
    if [ -s ${LAST_BUILT} -a -f ${LAST_BUILT} ] ; then
      last_build_db=$(echo $(cat ${LAST_BUILT}))
    fi
    if [[ ${last_build_db} = ${WHICH_DB} ]] ; then
      echo " [skipped] ${PRODUCT} ${SLURM_VERSION} rpms already built"
      Rc ErrExit ${EX_OSFILE} "rm -f ${NEED_BUILD_FLAG}"
    else
      echo " ${PRODUCT} appears to have been built with a different data base ('${last_build_db}'), needs rebuilding"
    fi
    ;;
  esac
fi

rc=0

## XXX loop through all RPMS in Manifest to construct this, to add/remove --with-* defines and args

if [ -s "${NEED_BUILD_FLAG}" ] ; then
  # remove slurm plugin rpms too
  Rc ErrExit ${EX_SOFTWARE} "rm -f ${RPMS_ARCH}/${PRODUCT}-*"
  rpmbuild -ba ${SLURM_SPEC}                  \
			--define "_topdir ${RPMBUILD}/"         \
			--define "_enable_debug --with-debug"		\
			--with slurmrestd                       \
			--with mysql                            \
			--with lua
  rc=$?
  if [ ${rc} -eq 0 ] ; then
    echo "${WHICH_DB}" > ${LAST_BUILT}
  fi
fi

exit ${rc}

# vim: background=dark ts=2 sw=2 syntax
