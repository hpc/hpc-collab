#!/bin/bash

## $Header: $
## Source:
## @file vcfs/config/firewall/1.set-ports-services-zones

## @brief This common configuration file contain the firewall configuration function(s).

VCLOAD=../../../provision/loader/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}" >/dev/tty
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi
SetFlags >/dev/null 2>&1

## @brief This library file contain the firewall configuration function(s).

declare -x CONFIG_FIREWALL=${CFG_HOMEVAGRANT}/${HOSTNAME}/config/firewall

declare -x FIREWALL_ROOT=${CONFIG_FIREWALL}
declare -x FIREWALL_ZONES=${FIREWALL_ROOT}/zones

## @fn ConfigFW()
##
ConfigFW() {
  local zones=""
  local all_zones=""
  local unused_zones=""

  Rc ErrExit ${EX_OSERR} "systemctl status firewalld"

  if [ -z "${FIREWALL_ROOT}" ] ; then
    ErrExit ${EX_OSERR} "empty firewall configuration"
  fi
  if [ ! -d "${FIREWALL_ROOT}" ] ; then
    ErrExit ${EX_OSFILE} "no firewall directory: ${FIREWALL_ROOT}"
  fi
  if  [ ! -d "${FIREWALL_ZONES}" ] ; then
    ErrExit ${EX_OSFILE} "no firewall zones directory: ${FIREWALL_ZONES}"
  fi 
  zones=$(echo $(ls ${FIREWALL_ZONES}/))
  all_zones=$(firewall-cmd --get-zones)
  unused_zones="${all_zones}"
  local _z
  _z_msg=""
  for _z in ${zones}
  do
    local zone_root=${FIREWALL_ZONES}/${_z}
    local interfaces
    local _i
    local _runtime_to_permanent=""
    unused_zones=${unused_zones//${_z}/}
    _z_msg="${_z_msg} ${_z}"
    interfaces=$(echo $(ls ${zone_root}/interfaces))
    for _i in ${interfaces}
    do
      local int=$(basename ${_i})
      local int_in_zone
      local int_zone

      _z_msg="${_z_msg} ${_i} "
      Rc ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} --change-interface=${int}"
      _runtime_to_permanent="true"

      int_zone=$(echo $(firewall-cmd --zone=${_z} --list-interfaces))
      int_in_zone=$(echo ${int_zone} | grep ${int})
      if [ -z "${int_in_zone}" ] ; then
        ErrExit ${EX_OSERR} "failed: firewall-cmd --zone=${_z} --change-interface=${int}"
      fi
      actually_int_in_zone=$(firewall-cmd --get-zone-of-interface=${int})
      if [ "${actually_int_in_zone}" != "${_z}" ] ; then
        ErrExit ${EX_OSERR}  "failed: firewall-cmd did not honor --zone=${_z} --change-interface=${int}"
      fi
    done

    local add_svc=${zone_root}/add-service
    if [ -n "${add_svc}" ] ; then
      if [ -d "${add_svc}" ] ; then

        local services=$(echo $(ls ${add_svc}))
        local _s_msg
        if [ -n "${services}" ] ; then
          _s_msg="services: "
        fi
        for _s in ${services}
        do
          local svc=$(basename ${_s})
          Rc ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} --add-service=${_s}"
          _runtime_to_permanent="true"
          local svc_in_zone
          local svc_zone
          _s_msg="${_s_msg} ${svc}"
          svc_zone=$(echo $(firewall-cmd --zone=${_z} --list-services))
          svc_in_zone=$(echo ${svc_zone} | grep ${svc})
          if [ -z "${svc_in_zone}" ] ; then
            ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} did not honor --add-service=${svc}"
          fi
        done
        Verbose " ${_s_msg} "
      fi
    fi

    local add_port=${zone_root}/add-port
    if [ -n "${add_port}" ] ; then
      if [ -d "${add_port}" ] ; then
        local ports=$(echo $(ls ${add_port}))
        Verbose " ports: ${ports}"
        for _p in ${ports}
        do
          local port=$(basename ${_p})
          local proto="tcp"
	  if [ -f "${add_port}/${_p}" ] ; then
            Rc ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} --add-port=${port}/${proto}"

          else
            if [ -d "${add_port}/${_p}" ] ; then
              for P in $(echo $(ls ${add_port}/${_p}))
              do
                proto=$(basename ${P})
                Rc ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} --add-port=${port}/${proto}"
              done
            else
              ErrExit ${EX_CONFIG} "${add_port}/${_p}: !dir, !file"
            fi
          fi 
          _runtime_to_permanent="true"
          local port_in_zone
          local port_zone
          port_zone=$(echo $(firewall-cmd --zone=${_z} --list-ports))
          port_in_zone=$(echo ${port_zone} | grep "${port}\/")
          if [ -z "${port_in_zone}" ] ; then
            ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} did not honor --add-port=${port}/tcp"
          fi
        done
      fi
    fi

    if [ -n "${_runtime_to_permanent}" ] ; then
      local retries
      (( retries=0 ))
      rc=0
      until (( ${retries} > ${REQUIREMENT_RETRY_LIMIT} )) || (( 0 == ${rc} ))
      do
        (( retries++ ))
        firewall-cmd --runtime-to-permanent
        rc=$?
        sleep ${REQUIREMENT_RETRY_SLEEP}
      done
      if (( 0 != ${rc} )) ; then
        ErrExit ${EX_OSERR} "firewall-cmd --runtime-to-permanent"
      fi 
    fi
  done

  if [ -n "${unused_zones}" ] ; then
    Verbose " delete: $(echo ${unused_zones})"
    for _z in ${unused_zones}
    do
      #Rc ErrExit ${EX_OSERR} "firewall-cmd --permanent --delete-zone=${_z}"
      firewall-cmd --permanent --delete-zone=${_z} |& egrep -v 'Error: BUILTIN_ZONE: .* is built-in zone'
    done
  fi

  return
}

ConfigFW ${OUT}
Rc ErrExit ${EX_OSERR} "firewall-cmd --get-active-zones"

[ -z "${zones+x}" ] && declare zones=""
for _z in ${zones}
do
  Verbose " ${_z} --"
  Rc ErrExit ${EX_OSERR} "firewall-cmd --info-zone=${_z}"
  Verbose " --"
done

trap '' 0
exit ${EX_OK}
