#!/bin/bash

## $Header: $
## Source:
## @file vcdb/install/slurm/7.start-slurmdbd-service

## @brief start slurmdbd service early

VCLOAD=../../../provision/loader/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

SetFlags >/dev/null 2>&1

ETCSLURM=/etc/slurm
SLURMDBD_CONF=${ETCSLURM}/slurmdbd.conf
SLURM_CONF=${ETCSLURM}/slurm.conf
VARLOGSLURM=/var/log/slurm
VARLOGSLURM_LINK=$(readlink ${VARLOGSLURM})
HOSTNAME=${HOSTNAME:-$(hostname -s)}
REQUIRED_PROC_FILE=${PWD}/required.service

for _v in SLURM_CONF SLURMDBD_CONF REQUIRED_PROC_FILE
do
	if [ ! -f "${!_v}"  ] ; then
		ErrExit ${EX_CONFIG} "${_v}:${!_v} missing"
	fi

	if [ ! -s "${!_v}"  ] ; then
		ErrExit ${EX_CONFIG} "${_v}:${!_v} empty"
	fi
done

SLURMDBD_LOG=$(grep LogFile=${VARLOGSLURM} ${SLURMDBD_CONF} | sed 's:LogFile=::')
SLURMDBD_HOST=$(echo ${SLURMDBD_LOG} | sed s:${VARLOGSLURM}/slurmdbd.:: | sed s:\.log$::)
if [ "${SLURMDBD_HOST}" != "${HOSTNAME}" ] ; then
	grep AccountingStorageHost=${HOSTNAME} ${SLURM_CONF} 2>&1
	rc=$?
	if [ "${rc}" -eq "${GREP_FOUND}" ] ; then
		ErrExit ${EX_CONFIG} "Misconfiguration: slurm.conf AccountingStorageHost != slurmdbd.conf DbdHost"
	fi
	Verbose "   slurmdbd is not configured on this host ($HOSTNAME), SLURMDBD_HOST:${SLURMDBD_HOST}"
	Rc ErrExit ${EX_CONFIG} "sed -i~ /slurmdbd/d ${REQUIRED_PROC_FILE}"
else
	isactive=$(systemctl status slurmdbd | awk '/Active:/ {print $2}')
	if [ "${isactive}" != "active" ] ; then
		Rc ErrExit 3 "systemctl start slurmdbd"
		sleep 1
	fi

	isactive=$(systemctl status slurmdbd | awk '/Active:/ {print $2}')
	if [ "${isactive}" != "active" ] ; then
  		ErrExit ${EX_CONFIG} "slurmdbd failed to start correctly: ${isactive}"
	fi
fi

# slurmdbd isn't ready immediately to start servicing requests
# if seeing "Connection refused" messages in slurmdbd status, may need to increase this
sleep 1

HOSTNAME=${HOSTNAME:-$(hostname -s)}
Rc ErrExit 10 "sacctmgr show cluster -n"

trap '' 0
exit ${EX_OK}
