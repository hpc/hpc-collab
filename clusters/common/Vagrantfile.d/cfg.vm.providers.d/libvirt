
      if !Vagrant.has_plugin?('vagrant-libvirt')
        puts 'The vagrant-libvirt plugin is not found (!Vagrant.has_plugin?("vagrant-libvirt").'
        puts 'To install: "vagrant plugin install vagrant-libvirt" or switch the virtualization provider'
        puts 'specified in "Vagrantfile.d/cfg.vm.providers.d/default_provider" from "libvirt"'
        puts 'You may also need to "touch common/provision/flag/NO_NFS", especially if you are not authorized'
        puts 'with sufficient privilege to enable and start an NFS server.'
        abort
      end

      cfg.vm.provider :libvirt do |lv, override|
        override.vm.hostname = hostnm

        # @see: https://fedoraproject.org/wiki/Changes/Vagrant_2.2_with_QEMU_Session
        lv.qemu_use_session = false

        # @see: https://bugzilla.redhat.com/show_bug.cgi?id=1283989
        lv.cpu_mode = 'host-passthrough'

# ## this may be necessary if the initial virtual host configuration fails
# ## at least on some linux/qemu variants
# ##       lv.management_network_device = 'virbr0'
# ##       lv.uri = 'qemu:///system'
# ##       lv.host = 'localhost'
# ##       lv.driver = 'kvm'

        lv.memory = manifest[:memory].chomp
        lv.cpus   = manifest[:cpus].chomp

        # eth0
        # override.vm.network "public_network"
        
        # eth1
        override.vm.network "private_network",
                             :ip    => manifest[:ip]

        # claimed to address indefinite wait for "waiting for IP address" error, but causes:
        # "Call to virDomainCreateWithFlags failed: Unable to get index for interface eth0: No such device"
        #                     :libvirt__dhcp_enabled => false,
        #                      use_dhcp_assigned_default_route: true
        #                      
        # perhaps? lv.cmd_line => "biosdevname=0 net.ifnames=0" which probably requires explicitly
        # cracking the box and inserting a kernel and initrd path
        # knowledgable analysis: https://github.com/vagrant-libvirt/vagrant-libvirt/issues/510#issuecomment-195326272
        # 
        # possibly: (https://github.com/vagrant-libvirt/vagrant-libvirt/issues/235)
        #   lv.nic_model_type => "rtl8139"
        # or, the reputably slower, but claimed more reliable:
        #   lv.nic_model_type => "e1000"
        
        # # eth2, if it exists, will be the bridged public NIC
        # at this point, use link-local IP address which should be replaced by a bridged dhcp address
        if manifest[:bridge] then
          override.vm.network "public_network",
                              dev:    manifest[:bridge],
                              bridge: manifest[:bridge],
                              mode:   "bridge",
                              ip:     "169.254.254.169"
        end # manifest[:bridge]

        if manifest[:adddiskpath] then
          lv.storage :file,
                     :allow_existing => true,
                     :size           => REPODISK_SIZE * 1024,
                     :cache          => "writethrough"
            # Libvirt provider: "absolute volume paths like '/tmp/vcfs_repodisk.vdi' not yet supported"
            #        :path           => manifest[:adddiskpath]
        end # manifest[:adddiskpath]

        override.trigger.before [:up] do |noduplicate|
          noduplicate.run = {path: "../common/bin/nodup.sh", args: hostnm }
        end # override.trigger.before[:up]

				if #{manifest[:ingestfromhost]}.chomp then
          override.trigger.before [:up] do |ingestfromhost|

### XXX FIXME
### XXX     manifest[:ingestfromhost].each do |key,value|
### XXX       print "       ", "#{key}  #{value}\n"
### XXX     end
### XXX Doesn't execute unless run method is set, but need to set path and args

            ingestfromhost.run = { path: "../common/bin/ingestfromhost.sh" , args: "vcfs :DOTFILES :DOTSSH" }
### XXX SHOULDBE ingestfromhost.run = { path: manifest[:ingestfromhost[#{path}]], args: manifest[:ingestfromhost[#{:args}]] }

          end # override.trigger.before [:up]
				end # manifest[:ingestfromhost]

        override.trigger.before [:destroy] do |unprovision|
          unprovision.run = {path: "../common/bin/unprovision.sh", args: hostnm }
        end # override.trigger.before

      end # cfg.vm.provider

	# vim: set ft=ruby tabstop=2 shiftwidth=2 syntax=on background=dark :

